using Microsoft.AspNetCore.Mvc;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using OfficeOpenXml;
using System.Data;
using THANHTOANTROIGIO.DAO;
using THANHTOANTROIGIO.Helpers;
using THANHTOANTROIGIO.Models;
using THANHTOANTROIGIO.Services;

namespace THANHTOANTROIGIO.Controllers
{
    [AuthorizeUser]
    [Route("lop-tin-chi")]
    public class LopTinChiController : Controller
    {
        [Route("")]
        [HttpGet]
        public IActionResult Index()
        {
            return View();
        }
        [Route("import")]
        [HttpGet]
        public IActionResult IndexImport()
        {
            return View();
        }
        [Route("")]
        [HttpPost]
        public JsonResult getLTC(LTCGetModel model)
        {
            var data = LopTinChiDAO.getListLTC(model.MaNKHK, model.MaGV);
            return Json(JsonConvert.SerializeObject(data));
        }
        [Route("ma-ltc")]
        [HttpPost]
        public JsonResult getLTCByMaLTC(int maLTC)
        {
            var data = LopTinChiDAO.getLTC(maLTC);
            return Json(JsonConvert.SerializeObject(data));
        }

        [Route("don-gia")]
        [HttpGet]
        public JsonResult getDonGiaGV(String maHocVi, String maGV, String tenMon)
        {
            var data = LopTinChiDAO.getDonGia(maHocVi.Trim(), maGV.Trim(), tenMon.Trim());
            return Json(new { success = true, data = data });
        }
        [Route("add")]
        [HttpPost]
        public JsonResult themLTC(LopTinChi model)
        {
            LopTinChi ltc = new LopTinChi();
            ltc = model;
            try
            {
                using (var context = new ThanhToanTroiGioEntities())
                {
                    context.LopTinChis.Add(model);
                    context.SaveChanges();
                }
                return Json(new { success = true, data = model });
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false,
                    message = "Thêm lớp tín chỉ thất bại!" + ex.InnerException.Message
                });
            }
        }

        [Route("edit")]
        [HttpPost]
        public JsonResult editLTC(LopTinChi model)
        {
            LopTinChi ltc = new LopTinChi();
            ltc = model;
            try
            {
                using (var context = new ThanhToanTroiGioEntities())
                {
                    context.Entry(model).State = EntityState.Modified;
                    context.SaveChanges();
                }

                return Json(new { success = true, data = model });
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false,
                    message = "Chỉnh sửa lớp tín chỉ thất bại!" + ex.InnerException.Message
                });
            }
        }
        [Route("delete")]
        [HttpPost]
        public JsonResult delete(int maLTC)
        {
            using (var context = new ThanhToanTroiGioEntities())
            {
                try
                {
                    var ltc = context.LopTinChis.FirstOrDefault(s => s.MaLTC == maLTC);
                    context.Entry(ltc).State = EntityState.Deleted;
                    context.SaveChanges();
                    return Json(new { success = true, data = "Xóa lớp tín chỉ thành công! " });
                }
                catch (Exception ex)
                {
                    return Json(new { success = false, message = "Xóa lớp tín chỉ thất bại vì vi phạm khóa ngoại" });
                }

            }
        }
        [Route("preview")]
        [HttpPost]
        public JsonResult preview(MultipartFormDataContent formTTTN)
        {
            var rq = HttpContext.Request.Form;
            var file = rq.Files.Count() > 0 ? rq.Files[0] : null;
            var listImport = new List<LopTinChi>();
            var maNKHK = rq["maNKHK"].ToString();
            string hocKy = "I";
            if (int.Parse(maNKHK) % 10 == 2)
            {
                hocKy = "II";
            }
            var maSheet = int.Parse(rq["maSheet"].ToString());
            if (file != null)
            {
                var filePath = Path.GetTempFileName();

                using (var stream = System.IO.File.Create(filePath))
                {
                    // The formFile is the method parameter which type is IFormFile
                    // Saves the files to the local file system using a file name generated by the app.
                    file.CopyTo(stream);
                }
                using (var package = new ExcelPackage(filePath))
                {
                    ExcelPackage.LicenseContext = LicenseContext.Commercial;
                    var workbook = package.Workbook;
                    var worksheet = workbook.Worksheets[maSheet];
                    int beginCol = 1;
                    int beginRow = 7;
                    int colCount = worksheet.Dimension.End.Column;  //get Column Count
                    int rowCount = worksheet.Dimension.End.Row;

                    int rowStart = 0, colStart = 0;

                    int rowEnd = 0;
                    bool flagEnd = false;
                    bool flagChange = false;

                    for (int i = beginRow; i <= rowCount; i++)
                    {
                        flagChange = false;
                        for (int j = beginCol; j <= colCount; j++)
                        {
                            if (worksheet.Cells[i, j].Value == null)
                            {
                                flagEnd = true;
                                continue;
                            }
                            else
                            {
                                flagEnd = false;
                                flagChange = true;
                                if ((bool)(worksheet.Cells[i, j].Value?.ToString().Contains("MÃ GV")))
                                {
                                    rowStart = i;
                                    colStart = j;
                                }
                            }


                        }
                        if (flagEnd = true && !flagChange)
                        {
                            rowEnd = i;
                            Console.Write("Row end: " + rowEnd);
                            break;
                        }
                    }
                    rowStart += 2;
                    List<LopTinChi> list = new List<LopTinChi>();
                    List<LopTinChiImportModel> listView = new List<LopTinChiImportModel>();
                    for (int row = rowStart; row < rowEnd; row++)
                    {
                        if (!worksheet.Cells[row, 12].Value.Equals(hocKy))
                        {
                            continue;
                        }
                        else
                        {
                            var model = new LopTinChi();
                            var modelView = new LopTinChiImportModel();
                            modelView.Stt=model.MaLTC = row;
                            modelView.TenLTC=model.TenLTC = worksheet.Cells[row, 13].Value.ToString();
                            modelView.SiSo=model.SiSo = Int32.Parse(worksheet.Cells[row, 14].Value.ToString());
                            int int_x;
                            double double_x;
                            modelView.SoNhomTH=model.SoNhomTH = Int32.TryParse(worksheet.Cells[row, 15].Value?.ToString(), out int_x) ? int_x : 0;
                            modelView.TietLTQD=model.TietLTQD = Math.Round(Double.TryParse(worksheet.Cells[row, 17].Value?.ToString(), out double_x) ? double_x : 0, 2);
                            modelView.TietLTTD=model.TietLTTD = Math.Round(Double.TryParse(worksheet.Cells[row, 29].Value?.ToString(), out double_x) ? double_x : 0, 2);
                            modelView.TietBTQD=model.TietBTQD = Math.Round(Double.TryParse(worksheet.Cells[row, 18].Value?.ToString(), out double_x) ? double_x : 0, 2);
                            modelView.TietBTTD=model.TietBTTD = Math.Round(Double.TryParse(worksheet.Cells[row, 30].Value?.ToString(), out double_x) ? double_x : 0, 2);
                            modelView.TietTHQD=model.TietTHQD = Math.Round(Double.TryParse(worksheet.Cells[row, 20].Value?.ToString(), out double_x) ? double_x : 0, 2);
                            modelView.TietTHTD=model.TietTHTD = Math.Round(Double.TryParse(worksheet.Cells[row, 32].Value?.ToString(), out double_x) ? double_x : 0, 2);

                            var maHocVi = worksheet.Cells[row, 2].Value.ToString().Split('.')[0];
                            var maGV = worksheet.Cells[row, 1].Value.ToString();
                            var monHoc = worksheet.Cells[row, 8].Value.ToString();
                            modelView.TenMonHoc = monHoc;
                            modelView.TenGiangVien= worksheet.Cells[row, 2].Value.ToString();
                            List<SqlParameter> param = new List<SqlParameter>();
                            param.Add(new SqlParameter("@maHocVi", maHocVi));
                            param.Add(new SqlParameter("@maGV", maGV));
                            param.Add(new SqlParameter("@monHoc", monHoc));
                            model.DonGia = Int32.Parse(new SQLHelper().ExecuteQuery("getDonGiaGV", param).Rows[0][0].ToString());

                            modelView.HSMonMoi=model.HSMonMoi = Math.Round(Double.TryParse(worksheet.Cells[row, 26].Value?.ToString(), out double_x) ? double_x : 0, 2);
                            modelView.HSNgoaiGio=model.HSNgoaiGio = Math.Round(Double.TryParse(worksheet.Cells[row, 25].Value?.ToString(), out double_x) ? double_x : 0, 2);
                            modelView.HSLopDongLT= model.HSLopDongLT = Math.Round(Double.TryParse(worksheet.Cells[row, 24].Value?.ToString(), out double_x) ? double_x : 0, 2);
                            modelView.HSLopDongTH=model.HSLopDongTH = Math.Round(Double.TryParse(worksheet.Cells[row, 27].Value?.ToString(), out double_x) ? double_x : 0, 2);
                            modelView.HSLTC=model.HSLTC = Math.Round(Double.TryParse(worksheet.Cells[row, 28].Value?.ToString(), out double_x) ? double_x : 0, 2);
                            model.HSHocKy = 1;
                            model.HSNhomTH = 0.5;
                            modelView.MaMonHoc=modelView.MaMonHoc = model.MaMon = worksheet.Cells[row, 9].Value.ToString();
                            model.MaBac = "DH";

                            param.Clear();
                            param.Add(new SqlParameter("@maBacHoc", model.MaBac));
                            model.HSBac = Double.Parse(new SQLHelper().ExecuteQuery("sp_Get_HSBacHoc", param).Rows[0][0].ToString());

                            modelView.MaHeLop=model.MaHeLop = worksheet.Cells[row, 10].Value.ToString();
                            param.Clear();
                            param.Add(new SqlParameter("@maHeLop", model.MaHeLop));
                            model.HSHeLop = Double.Parse(new SQLHelper().ExecuteQuery("sp_Get_HSHeLop", param).Rows[0][0].ToString());
                            model.MaGV = maGV;
                            modelView.MaGV = maGV;
                            model.MaNKHK = maNKHK;
                            modelView.ChucDanh= worksheet.Cells[row, 3].Value.ToString();
                            list.Add(model);
                            listView.Add(modelView);
                        }
                    }
                    listImport = list;
                    return Json(JsonConvert.SerializeObject(new { success = true, data = list,dataView=listView }));
                }
            }
            else
            {
                return Json(new { success = false, data = "Lỗi" });
            }
        }

        [Route("import-file")]
        [HttpPost]
        public JsonResult import([FromBody] List<LopTinChi> model)
        {
            /* DataTable dataTable = new DataTable();
             dataTable.Columns.Add("MaLTC", typeof(int));
             dataTable.Columns.Add("TenLTC", typeof(string));
             dataTable.Columns.Add("SiSo", typeof(int));
             dataTable.Columns.Add("SoNhomTH", typeof(int));
             dataTable.Columns.Add("TietBTQD", typeof(double));
             dataTable.Columns.Add("TietBTTD", typeof(double));
             dataTable.Columns.Add("TietLTQD", typeof(double));
             dataTable.Columns.Add("TietLTTD", typeof(double));
             dataTable.Columns.Add("TietTHQD", typeof(double));
             dataTable.Columns.Add("TietTHTD", typeof(double));
             dataTable.Columns.Add("DonGia", typeof(int));
             dataTable.Columns.Add("HSMonMoi", typeof(double));
             dataTable.Columns.Add("HSNgoaiGio", typeof(double));
             dataTable.Columns.Add("HSLopDongLT", typeof(double));
             dataTable.Columns.Add("HSLopDongTH", typeof(double));
             dataTable.Columns.Add("HSLTC", typeof(double));
             dataTable.Columns.Add("HSHocKy", typeof(double));
             dataTable.Columns.Add("HSNhomTH", typeof(double));
             dataTable.Columns.Add("MaMon", typeof(string));
             dataTable.Columns.Add("HSBac", typeof(double));
             dataTable.Columns.Add("MaBac", typeof(string));
             dataTable.Columns.Add("HSHeLop", typeof(double));
             dataTable.Columns.Add("MaHeLop", typeof(string));
             dataTable.Columns.Add("MaGV", typeof(string));
             dataTable.Columns.Add("MaNKHK", typeof(string));*/
            var convert = new ListToDataTableConverter();
            var dataTable = convert.ToDataTable(model);
         /*   foreach (var item in model)
            {
                item.MaLTC = 0;
                dataTable.Rows.Add(item);
            }*/
            List<SqlParameter> param = new List<SqlParameter>();
            param.Add(new SqlParameter("@LopTinChi", dataTable));
            var i = new SQLHelper().ExecuteQuery("Import_LopTinChi", param);
            return Json(JsonConvert.SerializeObject(new { success = true, data = dataTable }));
        }

    }
}
